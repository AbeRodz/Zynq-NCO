/*
 * nco.c
 *
 *  Created on: Nov 30, 2024
 *      Author: Abraham R.
 */

#include "xparameters.h"
#include "xil_io.h"
#include "nco_ip.h"


/*
 * REG 0 ->  frequency word
 * REG 1 -> wave type
 * REG 2 -> wave output
 * REG 3 -> enable
 *
 */

#define NCO_BASE_ADDR XPAR_NCO_IP_0_S00_AXI_BASEADDR
#define REG_FREQUENCY_OFFSET 0x00
#define REG_WAVE_TYPE_OFFSET 0x04
#define REG_WAVE_OUTPUT_OFFSET 0x08
int main(void) {
    xil_printf("-- Inicio de NCO IP Core --\r\n");

    // Set frequency tuning word (example value for 1 MHz tuning word)
    int32_t frequency_tuning_word = 0x00010000;
    Xil_Out32(NCO_BASE_ADDR + REG_FREQUENCY_OFFSET, frequency_tuning_word);
    xil_printf("Frequency tuning word set to: 0x%08X\r\n", frequency_tuning_word);

    // Confirm frequency setting
    int32_t read_back_value = Xil_In32(NCO_BASE_ADDR + REG_FREQUENCY_OFFSET);
    xil_printf("Read back frequency tuning word: 0x%08X\r\n", read_back_value);

    // Set wave type (e.g., sine wave = 0x01)
    int32_t wave_type = 0x00;
    Xil_Out32(NCO_BASE_ADDR + REG_WAVE_TYPE_OFFSET, wave_type);
    xil_printf("Wave type set to: %u\r\n", wave_type);

    xil_printf("Streaming wave output...\r\n");

    // Set enable
    int32_t enable = 0x01;
    Xil_Out32(NCO_BASE_ADDR + NCO_IP_S00_AXI_SLV_REG3_OFFSET, enable);
    xil_printf("Wave type set to: %u\r\n", enable);

    xil_printf("Streaming wave output...\r\n");


    for (int i = 0; i < 100; i++) {
        // Read wave_output register
        int32_t wave_output = NCO_IP_mReadReg(NCO_BASE_ADDR, NCO_IP_S00_AXI_SLV_REG2_OFFSET);
        //u16 high_bits = (wave_output >> 16) & 0xFFFF;
        int16_t low_bits = wave_output & 0xFFFF;

        // Print both parts for verification
        xil_printf("freq: 0x%04X\r\n", low_bits);


        // Delay to avoid overwhelming the FPGA
        //for (volatile int j = 0; j < 100000 ; j++);
    }


    xil_printf("-- Fin de NCO IP Core --\r\n");
}
